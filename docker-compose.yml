services:
  db:
    image: postgres:15-alpine
    container_name: report-card-db
    env_file:
      - .env.development
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - report-card-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: report-card-backend
    env_file:
      - .env.development
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS}
      PROJECT_NAME: ${PROJECT_NAME}
    volumes:
      - ./backend:/app
      - /app/.venv  # Prevent overwriting virtual environment
    ports:
      - "${BACKEND_PORT}:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - report-card-network
    command: uv run uvicorn src.app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: report-card-frontend
    env_file:
      - .env.development
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent overwriting node_modules
      - /app/.next  # Prevent overwriting build cache
    ports:
      - "${FRONTEND_PORT}:3000"
    depends_on:
      - backend
    networks:
      - report-card-network

networks:
  report-card-network:
    driver: bridge

volumes:
  postgres_data: